{
	"info": {
		"_postman_id": "ce8cdaaf-e082-4860-854a-2d66a3854e51",
		"name": "FIWARE Context Providers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Checks",
			"description": "",
			"item": [
				{
					"name": "Static Data Context Provider (Health Check)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{context-provider}}/proxy/static/health",
							"protocol": "http",
							"host": [
								"{{context-provider}}"
							],
							"path": [
								"proxy",
								"static",
								"health"
							]
						},
						"description": "This example returns the health of the Static Data Context Provider endpoint.\n\nA non-error response shows that an NGSI proxy is available on the network and returning values.\nEach Request will return the same data."
					},
					"response": []
				},
				{
					"name": "Random Data Context Provider (Health Check)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{context-provider}}/proxy/random/health",
							"protocol": "http",
							"host": [
								"{{context-provider}}"
							],
							"path": [
								"proxy",
								"random",
								"health"
							]
						},
						"description": "This example returns the health of the Random Data Generator Context Provider endpoint.\n\nA non-error response shows that an NGSI proxy is available on the network and returning values.\nEach Request will return some random dummy data."
					},
					"response": []
				},
				{
					"name": "Twitter API Context Provider (Health Check)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{context-provider}}/proxy/twitter/health",
							"protocol": "http",
							"host": [
								"{{context-provider}}"
							],
							"path": [
								"proxy",
								"twitter",
								"health"
							]
						},
						"description": "This example returns the health of the Twitter API Context Provider endpoint.\n\nA non-error response shows that an NGSI proxy for the Twitter API is available on the network and returning values.\n\nIf the proxy is correctly configured to connect to the Twitter API, a series of Tweets will be\nreturned.\n\nThe Twitter API uses OAuth2: \n* To get Consumer Key & Consumer Secret for the Twitter API, you have to create an app in Twitter via [https://apps.twitter.com/app/new](https://apps.twitter.com/app/new). Then you'll be taken to a page containing Consumer Key & Consumer Secret.\n* For more information see: [https://developer.twitter.com/](https://developer.twitter.com/)"
					},
					"response": []
				},
				{
					"name": "Weather API Context Provider (Health Check)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{context-provider}}/proxy/weather/health",
							"protocol": "http",
							"host": [
								"{{context-provider}}"
							],
							"path": [
								"proxy",
								"weather",
								"health"
							]
						},
						"description": "This example returns the health of the Weather API Context Provider endpoint.\n\nA non-error response shows that an NGSI proxy for the Weather API is available on the network and returning values.\n\nIf the proxy is correctly configured to connect to the Weather Underground API, the current weather in Berlin will be returned.\n\nMost of the Weather API features require an API key. \n\n* Sign up for a key at [https://www.wunderground.com/weather/api/](https://www.wunderground.com/weather/api/)\n\n* For more information see: [https://www.wunderground.com/weather/api/d/docs?MR=1](https://www.wunderground.com/weather/api/d/docs?MR=1)"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2964a74c-f2c6-46ac-9c71-f929208fb5a0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4820111c-c261-4e96-8089-0fc8e5065867",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Registering a Content Provider",
			"description": "",
			"item": [
				{
					"name": "NGSI v1 QueryContext Endpoint",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"entities\": [\n        {\n            \"type\": \"Store\",\n            \"isPattern\": \"false\",\n            \"id\": \"urn:ngsi-ld:Store:001\"\n        }\n    ],\n    \"attributes\": [\n        \"temperature\"\n    ]\n} "
						},
						"url": {
							"raw": "http://{{context-provider}}/proxy/static/number/queryContext",
							"protocol": "http",
							"host": [
								"{{context-provider}}"
							],
							"path": [
								"proxy",
								"static",
								"number",
								"queryContext"
							]
						},
						"description": "This example uses the NGSI v1 `queryContext` endpoint to request a `temperature` reading from the  Static Data Generator Context Provider.\n\nThe response will return a object of `type:Number` and `value:42`\n\nThe Orion Context Broker will make similar requests to this `queryContext` endpoint once a context provider has been registered."
					},
					"response": []
				},
				{
					"name": "Register a Context Provider",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Relative Humidity Context Source\",\n  \"dataProvided\": {\n    \"entities\": [\n      {\n        \"id\": \"urn:ngsi-ld:Store:001\",\n        \"type\": \"Store\"\n      }\n    ],\n    \"attrs\": [\n      \"relativeHumidity\"\n    ]\n  },\n  \"provider\": {\n    \"http\": {\n      \"url\": \"http://context-provider:3000/proxy/random/number\"\n    },\n     \"legacyForwarding\": true\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/registrations",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"registrations"
							],
							"query": [
								{
									"key": "type",
									"value": "Store",
									"description": "Entity type, to avoid ambiguity in case there are several entities with the same entity id",
									"disabled": true
								},
								{
									"key": "attrs",
									"value": "name",
									"description": "Ordered list of attribute names to display",
									"disabled": true
								}
							]
						},
						"description": "This example registers the Random Data Context Provider with the Orion Context Broker.\n\nThe body of the request states that: *\"The URL* `http://context-provider:3000/proxy/random/number` *is capable of providing* `relativeHumidity` *data for the entity called* `id=urn:ngsi-ld:Store:001`.*\"*\n\nThe value of `relativeHumidity` is **never** held within Orion, it is always requested on demand from the registered context provider. Orion merely holds the registration information about which context providers can offer context data.\n\nThe presence of the flag `\"legacyForwarding\": true` indicates that the registered context provider offers an NGSI v1 interface - therefore Orion  will make POST request for data on `http://context-provider:3000/proxy/random/number/queryContext` using the NGSI v1 format for the body, and expect to receive data in the NGSI v1 format in return.\n\nThis request will return with a **201 - Created** response code. The `Location` Header of the response contains a path to the registration record held in Orion"
					},
					"response": []
				},
				{
					"name": "List all registered content providers",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{orion}}/v2/registrations",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"registrations"
							],
							"query": [
								{
									"key": "type",
									"value": "Store",
									"description": "Entity type, to avoid ambiguity in case there are several entities with the same entity id",
									"disabled": true
								}
							]
						},
						"description": "This example lists all registered context providers\n\nFull context data  for a specified entity type can be retrieved by making a GET request to the `/v2/registrations/` endpoint."
					},
					"response": []
				},
				{
					"name": "Remove a registered content provider",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{orion}}/v2/registrations/5ad5b9435c28633f0ae90671",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"registrations",
								"5ad5b9435c28633f0ae90671"
							],
							"query": [
								{
									"key": "type",
									"value": "Store",
									"description": "Entity type, to avoid ambiguity in case there are several entities with the same entity id",
									"disabled": true
								},
								{
									"key": "attrs",
									"value": "name",
									"description": "Ordered list of attribute names to display",
									"disabled": true
								}
							]
						},
						"description": "This example removes the registration with the id `5ad5b9435c28633f0ae90671` from the context.\n\nRegistrations can be deleted by making a DELETE request to the `/v2/registrations/<entity>` endpoint.\n\n---\nSubsequent requests using the same `id` will result in an error response since the entity no longer exists"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reading Context Data",
			"description": "",
			"item": [
				{
					"name": "Obtain Store Information",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Store:001",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Store:001"
							]
						},
						"description": "This example reads the full context from the **Store** entity with the `id=urn:ngsi-ld:Store:001`.\n\nThe `relativeHumidity` attribute is returned as part of the context for the entity because a context provider has been registered to provide that data."
					},
					"response": []
				},
				{
					"name": "Obtain Store Humidity",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Store:001/attrs/relativeHumidity/value",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Store:001",
								"attrs",
								"relativeHumidity",
								"value"
							]
						},
						"description": "This example reads the value of the `relativeHumidity` attribute from the **Store** entity with the `id=urn:ngsi-ld:Store:001`.\n\nData is returned in the context because a context provider has been registered to provide that data."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "343e1af9-161c-4ec3-ba3a-a63bf0296b92",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "dc4dca7c-b13f-475e-888f-046dafbba038",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a8b78fa6-8b83-41d4-86a2-a22925d9a78e",
			"key": "orion",
			"value": "localhost:1026",
			"type": "string",
			"description": ""
		},
		{
			"id": "d7fa9880-efb7-40b4-a0ea-3a0a1b02d73c",
			"key": "context-provider",
			"value": "localhost:3000",
			"type": "string",
			"description": ""
		}
	]
}